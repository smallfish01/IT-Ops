#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# /Check/tart/Stop VM script
# Version: V1.1
# Author: Jun Yu
# Created: 2021/09/15
import types
import json
import requests
import urllib3
import string
import random
import sys
import os
import time


urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

host = '192.168.13.182'


def get_cookies():
    url = 'https://' + host + '/rest/com/vmware/cis/session'

    payload = {}
    files = {}
    headers = {
        'Authorization': 'Basic YWRtaW5pc3RyYXRvckB2c3BoZXJlLmxvY2FsOlRjMTIzNDU2Kigp'
        # VCenter login username/password, generated by Base64. Usage: username:password, like:
        # administrator@vsphere.local:123456
    }

    response = requests.request("POST", url, headers=headers, verify=False, data=payload, files=files)
    if response.status_code != 200:
        print("获取cookie失败")
        os.exit(1)
    token = response.headers['set-cookie'][0:54]
    return token


class Vcenter():

    def list_vm(self, token):
        url = 'https://' + host + '/rest/vcenter/vm'
        playload = {}
        headers = {
            'Cookie': token1
        }
        response = requests.request("GET", url, headers=headers, verify=False, data=playload)
        json_str = json.loads(response.text)
        for x in range(0, len(json_str['value'])):
            print("vm:", json_str['value'][x]['name'], "status:", json_str['value'][x]["power_state"])

    def start_vm(self, vm_name, token):
        url = 'https://' + host + '/rest/vcenter/vm?filter.names.1={}'.format(vm_name)
        # print(url)
        payload = {}
        headers = {
            'Cookie': token
        }
        response = requests.request("GET", url, headers=headers, verify=False, data=payload)
        if len(response.json()['value']) == 0:
            print("没有找到vm:{}".format(vm_name))
            # os._exit(1)
            return
        vm_status = response.json()['value'][0]['power_state']
        vm = response.json()['value'][0]['vm']
        if vm_status != "POWERED_ON":
            pass
        else:
            print("vm:{} 运行中,无需开机.".format(vm_name))
            # os._exit(1)
            return

        # start vm
        url = 'https://' + host + '/rest/vcenter/vm/{}/power/start'.format(vm)
        payload = {}
        headers = {
            'Cookie': token
        }
        response = requests.request("POST", url, headers=headers, verify=False, data=payload)
        if response.status_code == 200:
            print("vm:{} starting...".format(vm_name))
        # waiting VM status.
        time.sleep(10)
        url = 'https://' + host + '/rest/vcenter/vm?filter.names.1={}'.format(vm_name)
        #print("url=", url)
        response = requests.request("GET", url, headers=headers, verify=False, data=payload)
        json_str = json.loads(response.text)
        for x in range(0, len(json_str['value'])):
            if json_str['value'][x]['power_state'] == 'POWERED_ON':
                print("vm:", json_str['value'][x]['name'], "status:", json_str['value'][x]['power_state'], "已开机.")
            return

    def shutdown_vm(self, vm_name, token):
        url = 'https://' + host + '/rest/vcenter/vm?filter.names.1={}'.format(vm_name)
        payload = {}
        headers = {
            'Cookie': token
        }
        response = requests.request("GET", url, headers=headers, verify=False, data=payload)
        if len(response.json()['value']) == 0:
            print("没有找到vm:{}".format(vm_name))
            #os._exit(1)
            return
        vm_status = response.json()['value'][0]['power_state']
        vm = response.json()['value'][0]['vm']
        if vm_status == "POWERED_OFF":
            print("vm:{} 已关机，无需重复关机".format(vm_name))
            # os._exit(1)
            return

        # stop vm
        url = 'https://' + host + '/rest/vcenter/vm/{}/power/stop'.format(vm)
        payload = {}
        headers = {
            'Cookie': token
        }
        response = requests.request("POST", url, headers=headers, verify=False, data=payload)
        if response.status_code == 200:
            #print(response)
            print("vm:{} stopping...".format(vm_name))
        #time.sleep(10)
        url = 'https://' + host + '/rest/vcenter/vm?filter.names.1={}'.format(vm_name)
        #print("url=", url)
        response = requests.request("GET", url, headers=headers, verify=False, data=payload)
        json_str = json.loads(response.text)
        for x in range(0, len(json_str['value'])):
            if json_str['value'][x]['power_state'] == 'POWERED_OFF':
                print("vm:", json_str['value'][x]['name'], "status:", json_str['value'][x]['power_state'], "已关机.")
            return
def error():
    print("参数错误")
    print("脚本使用方法：")
    print("================================================================")
    print("查询VM状态：""python {} list_vm".format(sys.argv[0]))
    print("启动VM：""python {} start vm_name1 vm_name2 vm_name(n)".format(sys.argv[0]))
    print("关闭VM：""python {} shutdown vm_name1 vm_name2 vm_name(n)".format(sys.argv[0]))
    print("================================================================")
    os._exit(1)

if __name__ == '__main__':
    if len(sys.argv) == 1:
        error()
#        print("参数错误")
#        print("脚本使用方法：")
#        print("================================================================")
#        print("查询VM状态：""python {} list_vm".format(sys.argv[0]))
#        print("启动VM：""python {} start vm_name1 vm_name2 vm_name(n)".format(sys.argv[0]))
#        print("关闭VM：""python {} shutdown vm_name1 vm_name2 vm_name(n)".format(sys.argv[0]))
#        print("================================================================")
        os._exit(1)

    abc = Vcenter()
    token1 = get_cookies()

    if len(sys.argv) == 2 and sys.argv[1] == "list_vm":
        abc.list_vm(token1)
    elif len(sys.argv) <= 2 and sys.argv[1] == "start":
        print("Please entry VM name.")
        os._exit(1)
    elif len(sys.argv) >= 3 and sys.argv[1] == "start":
        for vm_name in sys.argv[2:]:
            print(vm_name)
            abc.start_vm(vm_name, token1)
    elif len(sys.argv) <= 2 and sys.argv[1] == "shutdown":
        print("Please entry VM name.")
        os._exit(1)
    elif len(sys.argv) >= 3 and sys.argv[1] == "shutdown":
        for vm_name in sys.argv[2:]:
            print(vm_name)
            abc.shutdown_vm(vm_name, token1)
    else:
        error()
